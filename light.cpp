/*******************************************************************************
*
* タイトル:		ライティング処理
* プログラム名:	light.cpp
* 作成者:		HAL東京ゲーム学科　劉南宏
*
*******************************************************************************/

/*******************************************************************************
* インクルードファイル
*******************************************************************************/
#include "light.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define NUM_LIGHT		(3)												// ライトの数

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************


//*****************************************************************************
// グローバル変数
//*****************************************************************************
D3DLIGHT9 g_aLight[NUM_LIGHT];											// ライト情報

//=============================================================================
// ライトの初期化処理
//=============================================================================
HRESULT InitLight(void)
{
	LPDIRECT3DDEVICE9 pDevice = GetDevice(); 

	D3DXVECTOR3 vecDir;

	// D3DLIGHT9構造体を0でクリアする
	ZeroMemory( &g_aLight[0], sizeof(D3DLIGHT9));
	
	// ライト0のタイプの設定
	g_aLight[0].Type = D3DLIGHT_DIRECTIONAL;
	
	// ライト0の拡散光の設定
	g_aLight[0].Diffuse = D3DXCOLOR( 1.0f, 1.0f, 1.0f, 1.0f);
	g_aLight[0].Ambient = D3DXCOLOR( 0.2f, 0.2f, 0.2f, 0.2f);
	
	// ライト0の方向の設定
	vecDir = D3DXVECTOR3( 0.2f, -0.6f, 0.8f);
	D3DXVec3Normalize( (D3DXVECTOR3*)&g_aLight[0].Direction, &vecDir);
	
	// ライト0をレンダリングパイプラインに設定
	pDevice->SetLight( 0, &g_aLight[0]);

	// ライト0を使用使用状態に
	pDevice->LightEnable( 0, TRUE);

	// D3DLIGHT9構造体を0でクリアする
	ZeroMemory( &g_aLight[1], sizeof(D3DLIGHT9));

	// ライト1のタイプの設定
	g_aLight[1].Type = D3DLIGHT_DIRECTIONAL;

	// ライト1の拡散光の設定
	g_aLight[1].Diffuse = D3DXCOLOR( 0.75f, 0.75f, 0.75f, 1.0f);
	g_aLight[1].Ambient = D3DXCOLOR( 0.2f, 0.2f, 0.2f, 1.0f);

    // ライト1の方向の設定
	vecDir = D3DXVECTOR3( -0.2f, -0.3f, -0.5f);
	D3DXVec3Normalize( (D3DXVECTOR3*)&g_aLight[1].Direction, &vecDir);

	// ライト1をレンダリングパイプラインに設定
	pDevice->SetLight( 1, &g_aLight[1]);

	// ライト1のを使用使用状態に
	pDevice->LightEnable( 1, TRUE);

	// D3DLIGHT9構造体を0でクリアする
	ZeroMemory( &g_aLight[2], sizeof(D3DLIGHT9));
	
	// ライト2のタイプの設定
	g_aLight[2].Type = D3DLIGHT_DIRECTIONAL;
	
	// ライト2の拡散光の設定
	g_aLight[2].Diffuse = D3DXCOLOR( 0.15f, 0.15f, 0.15f, 1.0f);
	g_aLight[2].Ambient = D3DXCOLOR( 0.2f, 0.2f, 0.2f, 1.0f);
	
	// ライト2の方向の設定
	vecDir = D3DXVECTOR3( 0.8f, 0.1f, 0.5f);
	D3DXVec3Normalize( (D3DXVECTOR3*)&g_aLight[2].Direction, &vecDir);
	
	// ライト2をレンダリングパイプラインに設定
	pDevice->SetLight( 2, &g_aLight[2]);

	// ライト2を使用使用状態に
	pDevice->LightEnable( 2, TRUE);

	// ライティングモードをON
	pDevice->SetRenderState( D3DRS_LIGHTING, TRUE);

	return S_OK;
}

//=============================================================================
// ライトの終了処理
//=============================================================================
void UninitLight(void)
{
}

//=============================================================================
// ライトの更新処理
//=============================================================================
void UpdateLight(void)
{
}

